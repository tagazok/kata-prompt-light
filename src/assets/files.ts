
    export const files: any = 
        {"javascript":{"directory":{"001":{"directory":{"test.js":{"file":{"contents":"const sum = require('./app');\n\ntest('adds 1 + 2 to equal 3', () => {\n  expect(sum(1, 2)).toBe(3);\n});\ntest('adds 2 + 2 to equal 4', () => {\n  expect(sum(2, 2)).toBe(4);\n});\ntest('adds 1 + -2 to equal -1', () => {\n  expect(sum(1, -2)).toBe(-1);\n});\ntest('adds 0 + 1 to equal 1', () => {\n  expect(sum(0, 1)).toBe(1);\n});"}},"challenge.txt":{"file":{"contents":"**SUM**\n\nExample of function call:\n```javascript\nsum(4, 2);\n// => 6\n```"}},"data.json":{"file":{"contents":"{\n    \"name\": \"Sum\",\n    \"function\": {\n        \"name\": \"sum\"\n    },\n    \"completionPoints\": 20,\n    \"tests\": {\n        \"adds 1 + 2 to equal 3\": 10,\n        \"adds 2 + 2 to equal 4\": 10,\n        \"adds 1 + -2 to equal -1\": 10,\n        \"adds 0 + 1 to equal 1\": 10\n    }\n}"}}}},"002":{"directory":{"test.js":{"file":{"contents":"const divide = require('./app');\n\ntest('divide 4 / 4 to equal 1', () => {\n  expect(divide(4, 4)).toBe(1);\n});\ntest('divide 6 / 2 to equal 3', () => {\n  expect(divide(6, 2)).toBe(3);\n});\ntest('divide 3 / -1 to equal -3', () => {\n  expect(divide(3, -1)).toBe(-3);\n});\ntest('divide 42 / 0 to equal Infinity', () => {\n  expect(divide(42, 0)).toBe(Infinity);\n});"}},"challenge.txt":{"file":{"contents":"**Division**\n\nA function that divide 2 numbers\n\nExample of function call:\n```javascript\ndivide(4, 2);\n// => 2\n```"}},"data.json":{"file":{"contents":"{\n    \"name\": \"Division\",\n    \"function\": {\n        \"name\": \"divide\"\n    },\n    \"completionPoints\": 20,\n    \"tests\": {\n        \"divide 4 / 4 to equal 1\": 10,\n        \"divide 6 / 2 to equal 3\": 10,\n        \"divide 3 / -1 to equal -3\": 10,\n        \"divide 42 / 0 to equal Infinity\": 20\n    }\n}"}}}},"003":{"directory":{"test.js":{"file":{"contents":"const rot42 = require('./app');\n\ntest(\"Ciphers the whole alphabet to ROT42, equalling 'NOPQRSTUVWXYZABCDEFGHIJKLM'\", () => {\n  expect(rot42('ABCDEFGHIJKLMNOPQRSTUVWXYZ')).toBe('QRSTUVWXYZABCDEFGHIJKLMNOP')\n})\n\ntest(\"Ciphers 'ABCXYZ' to ROT13, equalling 'NOPKLM'\", () => {\n  expect(rot42('ABCXYZ')).toBe('QRSNOP')\n})\n\ntest(\"Ciphers 'Lorem Ipsum Dolor Sit Amet' to 'Yberz Vcfhz Qbybe Fvg Nzrg' on ROT42\", () => {\n  expect(rot42('Lorem Ipsum Dolor Sit Amet')).toBe('Behuc Yfikc Tebeh Iyj Qcuj')\n})\n"}},"challenge.txt":{"file":{"contents":"**ROT42**\n\nROT42 (\"rotate by 42 places\") is a simple letter substitution cipher that replaces a letter with the 42th letter after it in the latin alphabet. ROT42 is a special case of the Caesar cipher which was developed in ancient Rome.\n\nExample of function call:\n```javascript\nrot42(\"HELLO\");\n// => XUBBE\n```\n\nSource: <a href=\"https://en.wikipedia.org/wiki/Caesar_cipher\" target=\"_blank\">Caesar Cypher wikipedia</a>"}},"data.json":{"file":{"contents":"{\n    \"name\": \"ROT42\",\n    \"function\": {\n        \"name\": \"rot42\"\n    },\n    \"completionPoints\": 20,\n    \"tests\": {\n        \"Ciphers the whole alphabet to ROT42, equalling 'NOPQRSTUVWXYZABCDEFGHIJKLM'\": 10,\n        \"Ciphers 'ABCXYZ' to ROT13, equalling 'NOPKLM'\": 10,\n        \"Ciphers 'Lorem Ipsum Dolor Sit Amet' to 'Yberz Vcfhz Qbybe Fvg Nzrg' on ROT42\": 10\n    }\n}"}}}},"004":{"directory":{"test.js":{"file":{"contents":"const pal = require('./app');\n\ntest('madam is a palindrome', () => {\n  expect(pal('madam')).toBe(true)\n})\n\ntest('12/21/33 12:21 is a palindrome', () => {\n  expect(pal('12/21/33 12:21')).toBe(true)\n})\n\ntest('coucou is not a palindrome', () => {\n  expect(pal('coucou')).toBe(false)\n})\n"}},"challenge.txt":{"file":{"contents":"**PALINDROME**\n\nA **palindrome** is a word, number, phrase, or other sequence of symbols that reads the same backwards as forwards, such as *madam* or *racecar*, the date and time *12/21/33 12:21*.\n\nExample of function call:\n```javascript\npal(\"madam\");\n// => true\n```\n\nSource: <a href=\"https://en.wikipedia.org/wiki/Palindrome\" target=\"_blank\">wikipedia</a>"}},"data.json":{"file":{"contents":"{\n    \"name\": \"Palindrome\",\n    \"function\": {\n        \"name\": \"pal\"\n    },\n    \"completionPoints\": 60, \n    \"tests\": {\n        \"madam is a palindrome\": 20,\n        \"coucou is not a palindrome\": 20,\n        \"12/21/33 12:21 is a palindrome\": 40 \n    }\n}"}}}},"005":{"directory":{"test.js":{"file":{"contents":"const intToRoman = require('./app');\n\ntest('3 is III', () => {\n  expect(intToRoman(3)).toBe('III')\n})\n\ntest('58 is LVIII', () => {\n  expect(intToRoman(58)).toBe('LVIII')\n})\n\ntest('1994 is MCMXCIV', () => {\n  expect(intToRoman(1994)).toBe('MCMXCIV')\n})\n"}},"challenge.txt":{"file":{"contents":"**Integer to Roman**\n\nRoman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D` and `M`.\n\n| Symbol      | Value       |\n| ----------- | ----------- |\n| I           | 1           |\n| V           | 5           |\n| X           | 10          |\n| L           | 50          |\n| C           | 100         |\n| D           | 500         |\n| M           | 1000        |\n\nFor example, `2` is written as `II` in Roman numeral, just two one's added together. `12` is written as `XII`, which is simply `X + II`. The number `27` is written as `XXVII`, which is `XX + V + II`.\n\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as `IX`. There are six instances where subtraction is used:\n\n`I` can be placed before `V` (5) and `X` (10) to make 4 and 9. \n`X` can be placed before `L` (50) and `C` (100) to make 40 and 90. \n`C` can be placed before `D` (500) and `M` (1000) to make 400 and 900.\nGiven an integer, convert it to a roman numeral.\n\nExample of function call:\n```javascript\nintToRoman(\"2\");\n// => II\n```"}},"data.json":{"file":{"contents":"{\n    \"name\": \"Integer to Roman\",\n    \"function\": {\n        \"name\": \"intToRoman\"\n    },\n    \"completionPoints\": 80, \n    \"tests\": {\n        \"3 is III\": 20,\n        \"58 is LVIII\": 20,\n        \"1994 is MCMXCIV\": 40 \n    }\n}"}}}},"006":{"directory":{"test.js":{"file":{"contents":"const addBinary = require('./app');\n\ntest('11 + 1 equals 100', () => {\n  expect(addBinary(\"11\", \"1\")).toBe(\"100\")\n})\n\ntest('1010 + 1011 equals 10101', () => {\n  expect(addBinary(\"1010\", \"1011\")).toBe(\"10101\")\n})"}},"challenge.txt":{"file":{"contents":"**Add Binary**\n\nGiven two binary strings a and b, return their sum as a binary string.\n\nExample of function call:\n```javascript\naddBinary(\"11\", \"1\");\n// => \"100\"\n```"}},"data.json":{"file":{"contents":"{\n    \"name\": \"Add Binary\",\n    \"function\": {\n        \"name\": \"addBinary\"\n    },\n    \"completionPoints\": 30, \n    \"tests\": {\n        \"11 + 1 equals 100\": 20,\n        \"1010 + 1011 equals 10101\": 20 \n    }\n}"}}}}}},"python":{"directory":{"001":{"directory":{"test.py":{"file":{"contents":"import unittest\nfrom app import sum\n\ndef test_sum():\n    assertEqual(Maths(1, 2).sum(), 3)\n    assertEqual(Maths(1, -1).sum(), 0)\n    assertEqual(Maths(0, 0).sum(), 0)\n    assertEqual(Maths(0, 1).sum(), 1)\n    assertEqual(Maths(0, -1).sum(), -1)\n    assertEqual(Maths(-1, 0).sum(), -1)\n    assertEqual(Maths(-1, 10).sum(), 9)"}},"challenge.txt":{"file":{"contents":""}},"data.json":{"file":{"contents":"{}"}}}}}},"package.json":{"file":{"contents":"{\n    \"name\": \"example-app\",\n    \"type\": \"module\",\n    \"dependencies\": {\n        \"express\": \"latest\",\n        \"nodemon\": \"latest\",\n        \"jest\": \"latest\",\n        \"@jest/globals\": \"latest\",\n        \"python-shell\": \"latest\",\n        \"jest-json-reporter\": \"latest\"\n    },\n    \"scripts\": {\n        \"start\": \"nodemon --watch './' index.js\",\n        \"jest\": \"jest\"\n    }\n}"}}}
    ;
        